[["Map",1,2,9,10,51,52,99,100,280,281],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.5","content-config-digest","91ee9bef2ff3584e","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://Rohit-Medpalli123.github.io\",\"compressHTML\":true,\"base\":\"/PersonalWebsite\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"dracula\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","experience",["Map",9,11],{"id":9,"data":12,"filePath":34,"digest":35,"rendered":36,"legacyId":50},{"title":13,"experiences":14,"education":30},"Work Experience",[15,19,22,26],{"company":16,"role":17,"period":18},"Infilect Technologies Private Limited","Lead Software Test Engineer","2022 - Present",{"company":16,"role":20,"period":21},"Senior Software Test Engineer","2019 - 2022",{"company":23,"role":24,"period":25},"Bonzai Digital Pvt. Ltd","QA Engineer","2018 - 2019",{"company":27,"role":28,"period":29},"Qxf2 Services","Intern QA Engineer","2016 - 2017",{"company":31,"role":32,"period":33},"Electronics & Telecommunication","Bachelor of Engineering","2013 - 2016","src/content/experience/experience.md","1a125e6f196067f2",{"html":37,"metadata":38},"",{"headings":39,"localImagePaths":40,"remoteImagePaths":41,"frontmatter":42,"imagePaths":49},[],[],[],{"title":13,"experiences":43,"education":48},[44,45,46,47],{"company":16,"role":17,"period":18},{"company":16,"role":20,"period":21},{"company":23,"role":24,"period":25},{"company":27,"role":28,"period":29},{"company":31,"role":32,"period":33},[],"experience.md","skills",["Map",53,54],"technical",{"id":53,"data":55,"filePath":82,"digest":83,"rendered":84,"legacyId":98},{"title":56,"skills":57},"Technical Arsenal",[58,66,74],{"category":59,"items":60},"Testing & Automation",[61,62,63,64,65],"Selenium WebDriver","Appium","TestNG / JUnit","REST API Testing","JMeter Performance Testing",{"category":67,"items":68},"Development",[69,70,71,72,73],"Python","Java","JavaScript","SQL & MongoDB","Git & Jenkins",{"category":75,"items":76},"Investigation Tools",[77,78,79,80,81],"Chrome DevTools","Postman","JMeter","Docker","CI/CD Pipelines","src/content/skills/technical.md","7c287c9f20080868",{"html":37,"metadata":85},{"headings":86,"localImagePaths":87,"remoteImagePaths":88,"frontmatter":89,"imagePaths":97},[],[],[],{"title":56,"skills":90},[91,93,95],{"category":59,"items":92},[61,62,63,64,65],{"category":67,"items":94},[69,70,71,72,73],{"category":75,"items":96},[77,78,79,80,81],[],"technical.md","projects",["Map",101,102,151,152],"api-testing-suite",{"id":101,"data":103,"body":122,"filePath":123,"digest":124,"rendered":125,"legacyId":150},{"title":104,"description":105,"image":106,"techStack":108,"github":118,"featured":119,"completed":120,"category":121},"API Testing Suite","A comprehensive API testing framework built with RestAssured and TestNG, featuring data-driven testing, environment management, and detailed reporting capabilities.",{"url":107,"alt":104},"/PersonalWebsite/images/projects/api-testing.png",{"language":109,"framework":110,"reporting":114,"cicd":116},[70],[111,112,113],"RestAssured","TestNG","Maven",[115],"Allure Reports",[117],"Jenkins","https://github.com/Rohit-Medpalli123/ApiFramework",false,["Date","2024-11-01T00:00:00.000Z"],"testing","## Overview\nThis API testing suite provides a robust framework for testing RESTful APIs. It combines the power of RestAssured for API testing with TestNG for test orchestration, offering a comprehensive solution for API quality assurance.\n\n## Key Features\n- Data-driven testing with Excel and JSON\n- Environment configuration management\n- Response schema validation\n- Detailed HTML reporting\n- CI/CD integration with Jenkins\n- Parallel test execution\n- Request/Response logging\n\n## Technical Implementation\nThe framework utilizes RestAssured for API interactions, TestNG for test management, and custom utilities for handling test data and environment configurations. It generates detailed reports showing request/response details, test execution time, and any failures encountered.","src/content/projects/api-testing-suite.md","855523512a856226",{"html":126,"metadata":127},"\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>This API testing suite provides a robust framework for testing RESTful APIs. It combines the power of RestAssured for API testing with TestNG for test orchestration, offering a comprehensive solution for API quality assurance.\u003C/p>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Cul>\n\u003Cli>Data-driven testing with Excel and JSON\u003C/li>\n\u003Cli>Environment configuration management\u003C/li>\n\u003Cli>Response schema validation\u003C/li>\n\u003Cli>Detailed HTML reporting\u003C/li>\n\u003Cli>CI/CD integration with Jenkins\u003C/li>\n\u003Cli>Parallel test execution\u003C/li>\n\u003Cli>Request/Response logging\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technical-implementation\">Technical Implementation\u003C/h2>\n\u003Cp>The framework utilizes RestAssured for API interactions, TestNG for test management, and custom utilities for handling test data and environment configurations. It generates detailed reports showing request/response details, test execution time, and any failures encountered.\u003C/p>",{"headings":128,"localImagePaths":139,"remoteImagePaths":140,"frontmatter":141,"imagePaths":149},[129,133,136],{"depth":130,"slug":131,"text":132},2,"overview","Overview",{"depth":130,"slug":134,"text":135},"key-features","Key Features",{"depth":130,"slug":137,"text":138},"technical-implementation","Technical Implementation",[],[],{"title":104,"description":105,"image":142,"techStack":143,"github":118,"featured":119,"completed":148,"category":121},{"url":107,"alt":104},{"language":144,"framework":145,"reporting":146,"cicd":147},[70],[111,112,113],[115],[117],["Date","2024-11-01T00:00:00.000Z"],[],"api-testing-suite.md","test-automation-framework",{"id":151,"data":153,"body":166,"filePath":167,"digest":168,"rendered":169,"legacyId":279},{"title":154,"description":155,"techStack":156,"github":118,"featured":163,"completed":164,"category":165},"Building a Robust API Test Automation Framework with Python","A comprehensive API test automation framework built with Python, leveraging Pytest and Requests libraries for efficient testing, with Allure reporting and Jenkins CI/CD integration.",{"language":157,"framework":158,"reporting":161,"cicd":162},[69],[159,160],"Pytest","Requests",[115],[117],true,["Date","2024-12-15T00:00:00.000Z"],"automation","# 🚀 Building a Robust API Test Automation Framework with Python\n\n\n## 📋 Table of Contents\n- [Introduction](#-introduction)\n- [What's in it for You?](#-whats-in-it-for-you)\n- [Architecture Overview](#-architecture-overview)\n  - [Framework Layers Explained](#framework-layers-explained)\n- [Meet the Dream Team](#-meet-the-dream-team)\n  - [The Commander: API Player](#-the-commander-api-player-coreapi_playerpy)\n  - [The Scorekeeper: Results Tracking](#-the-scorekeeper-results-tracking-utilsresultspy)\n  - [The Specialists: Endpoint Classes](#-the-specialists-endpoint-classes)\n  - [The Foundation: BaseAPI](#-the-foundation-baseapi)\n- [Awesome Features](#-awesome-features)\n  - [Environment Mastery](#-environment-mastery)\n  - [Beautiful Logs](#-beautiful-logs)\n  - [Victory Tracking](#-victory-tracking)\n  - [Allure Reports Integration](#-allure-reports-integration)\n- [Best Practices](#-best-practices---our-royal-decrees)\n- [Let's Write Some Epic Tests](#-lets-write-some-epic-tests)\n- [Cool Technical Stuff](#-cool-technical-stuff)\n  - [Smart Error Detection](#-smart-error-detection)\n  - [Retry Mechanism](#-retry-mechanism)\n  - [Test Breakdown](#-test-breakdown)\n  - [Lambda Magic](#-lambda-magic-the-secret-sauce)\n- [Coming Soon to Our Kingdom](#-coming-soon-to-our-kingdom)\n- [The Grand Finale](#-the-grand-finale)\n- [References](#-legendary-scrolls-references)\n\n## 🎯 Introduction\nHey there, fellow automation enthusiasts! 👋 Ready to dive into something exciting? Today, I'm going to walk you through our super-cool API testing framework that I've built using Python. It's like having a Swiss Army knife for API testing - versatile, reliable, and surprisingly elegant!\n\n## 🎮 What's in it for You?\nBefore we dive deep, here's what you're going to get:\n1. 🏗️ A rock-solid, maintainable testing framework\n2. 📝 Beautiful logging that actually makes sense\n3. 🌍 Support for all your environments (staging, prod, UAT)\n4. ✨ Super easy test case creation\n5. 📊 Test results that tell a story\n\n## 🏰 Architecture Overview\nOur architecture follows a modular design pattern that makes it highly maintainable, readable, and extensible. Think of our framework as a well-organized castle, where each component has its specific role:\n\n![Framework Architecture](/PersonalWebsite/images/framework-architecture.png)\n\n### Framework Layers Explained\n\n1. **Base API Layer** 🌐\n   - The foundation that handles all HTTP communications\n   - Implements wrappers for REST calls (GET, POST, PUT, DELETE)\n   - Manages request/response lifecycles and error handling\n   - Located in Core/base_api.py\n\n2. **API Player Layer** 🎮\n   - Orchestrates test actions and manages test state/context\n   - Interfaces directly with endpoint classes through composition\n   - Contains business logic and test-oriented wrappers\n   - Formats requests, processes responses, and handles errors\n   - Maintains session information and authentication\n   - Located in Core/api_player.py\n\n3. **Endpoints Layer** 🔌\n   - Abstracts the endpoints of the application under test\n   - One class per feature area (e.g., CarsAPIEndpoints, RegistrationAPIEndpoints)\n   - Maps directly to the application's API structure\n   - No business logic, only endpoint definitions and basic request formatting\n   - Located in Endpoints directory\n\n4. **Results Tracking Layer** 📊\n   - Tracks test outcomes and provides detailed reporting\n   - Manages logging and result collection\n   - Helps generate meaningful test reports\n   - Located in Utils/results.py\n\n## 🎮 Meet the Dream Team\n\n### 1. 🎯 The Commander: API Player (Core/api_player.py)\nMeet our superstar - the APIPlayer class! This is the heart of our framework and the layer most test cases interact with directly. It serves as an interface between test cases and the endpoint classes while maintaining test context/state.\n\n```python\nclass APIPlayer(Results):\n    \"\"\"The mastermind behind all API operations 🤓\"\"\"\n    \n    def __init__(self, url: str, log_file_path: Optional[str] = None, \n                 environment: str = \"staging\"):\n        # First, let's set up our result tracking superpowers!\n        super().__init__(log_file_path=log_file_path)\n        \n        # Which battlefield are we on? 🌍\n        self.environment = environment\n        self.logger = get_logger(\"APIPlayer\")\n        \n        # Direct composition of endpoint classes\n        self.cars_api = CarsAPIEndpoints(url)      # For all things cars\n        self.users_api = UserAPIEndpoints(url)      # Managing our users\n        self.registration_api = RegistrationAPIEndpoints(url)  # Handling registrations\n```\n\n#### Key Responsibilities\n\n1. **State Management** 💾\n   - Maintains test context and session information\n   - Tracks test state across multiple API calls\n   - Stores authentication details and headers\n\n2. **Business Logic** 🛠️\n   - Contains wrappers around commonly used API operations\n   - Implements test-specific logic that combines multiple API calls\n   - Provides higher-level operations that abstract complex flows\n\n3. **Error Handling** 🚫\n   - Centralizes error detection and recovery\n   - Implements common validation patterns\n   - Provides consistent error reporting\n\n4. **Result Processing** 📈\n   - Formats API responses for test consumption\n   - Extracts relevant data from responses\n   - Enhances logging with contextual information\n\nHere's a sample of how it processes API calls:\n\n```python\ndef get_cars(self, auth_details: Optional[str] = None) -> Tuple[bool, Dict[str, Any]]:\n    \"\"\"Fetches the list of available cars.\n    \n    Args:\n        auth_details: Authentication credentials (optional)\n        \n    Returns:\n        Tuple containing success flag and response data\n    \"\"\"\n    # Prepare headers with authentication\n    headers = self._prepare_headers(auth_details)\n    \n    # Log what we're about to do\n    self.logger.info(f\"📝 Request parameters: headers={headers}\")\n    \n    # Execute the API call with error handling\n    return self._execute_api_call(\n        \"get_cars\", \n        lambda: self.cars_api.get_cars(headers=headers)\n    )\n```\n\n### 2. 📈 The Scorekeeper: Results Tracking (Utils/results.py)\nMeet our meticulous scorekeeper! This little genius keeps track of everything that happens in our tests:\n\n```python\nclass Results:\n    \"\"\"Your friendly neighborhood test tracker 📊\"\"\"\n    \n    def __init__(self, log_file_path: Optional[str] = None):\n        # Get our trusty logger ready 📖\n        self.logger = get_logger(\"results\")\n        \n        # Initialize our scoreboard 🏆\n        self.total = 0      # Total battles fought\n        self.passed = 0      # Victories achieved\n        self.failures = []   # Lessons learned 📝\n```\n\n### 3. 🔌 The Specialists: Endpoint Classes\nHere come our API specialists! Each one is an expert in their domain, following the Endpoint Layer pattern in our framework. These classes abstract the application's API endpoints without containing any business or test logic. Each feature area has its own dedicated endpoint class.\n\n```python\nclass CarsAPIEndpoints(BaseAPI):\n    \"\"\"Your gateway to the world of cars 🚗\"\"\"\n    def __init__(self, base_url: str):\n        super().__init__(base_url)\n        self.logger = get_logger(\"CarsAPI\")\n\n    def cars_url(self, suffix: str = '') -> str:\n        \"\"\"Append API endpoint to base URL\"\"\"\n        return f\"{self.base_url}/cars/{suffix}\"\n        \n    def get_cars(self, headers: Dict[str, str]) -> Response:\n        \"\"\"Fetch our amazing car collection 🚘\"\"\"\n        url = self.cars_url()\n        self.logger.debug(f\"GET request to {url}\")\n        return self.session.get(url, headers=headers)\n        \n    def get_car(self, params: Dict[str, str], headers: Dict[str, str]) -> Response:\n        \"\"\"Get details for a specific car\"\"\"\n        url = self.cars_url()\n        return self.session.get(url, params=params, headers=headers)\n        \n    def add_car(self, data: Dict[str, Any], headers: Dict[str, str]) -> Response:\n        \"\"\"Add a new car to the system\"\"\"\n        url = self.cars_url()\n        return self.session.post(url, json=data, headers=headers)\n```\n\n#### Endpoint Class Features\n\n1. **Pure API Mapping** 🗺️\n   - Each method maps to exactly one API endpoint\n   - Methods handle URL construction and parameter formatting\n   - Simple 1:1 relationship with the API's structure\n\n2. **Clean Separation** ✂️\n   - No business logic in endpoint classes\n   - No test assertions or validations\n   - Focused solely on API communication\n\n3. **Composition Over Inheritance** 🧲\n   - All endpoint classes inherit from BaseAPI for core functionality\n   - API Player accesses endpoints through composition\n   - Each class handles one specific domain area\n\n### 4. 🌐 The Foundation: BaseAPI\nThis is the foundation of our API communication that handles the core HTTP operations and provides wrappers around requests library:\n\n```python\nclass BaseAPI:\n    \"\"\"Base class for API communications 🌐\"\"\"\n    \n    def __init__(self, base_url: str, timeout: int = 30):\n        \"\"\"Initialize with a requests Session for connection pooling\"\"\"\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.session.timeout = timeout\n        \n        # Configure retry strategy\n        adapter = HTTPAdapter(\n            max_retries=retry_strategy,\n            pool_connections=10,\n            pool_maxsize=10\n        )\n        self.session.mount(\"http://\", adapter)\n        self.session.mount(\"https://\", adapter)\n    \n    def __del__(self):\n        \"\"\"Close session when object is destroyed\"\"\"\n        if hasattr(self, 'session'):\n            self.session.close()\n```\n\n#### BaseAPI Features\n\n1. **Connection Efficiency** 🚄\n   - Uses connection pooling for better performance\n   - Implements retry strategy for transient failures\n   - Manages session lifecycle automatically\n\n2. **Error Handling** 🛡️\n   - Common error handling for HTTP errors\n   - Consistent response processing\n   - Built-in timeout management\n\n3. **Resource Management** 🧹\n   - Properly closes connections when done\n   - Prevents resource leaks with proper teardown\n   - Optimizes connection reuse\n\n## ✨ Awesome Features\n\n### 1. 🌍 Environment Mastery\nWe've got all your environments covered! Switch between them as easily as changing TV channels:\n\n```python\nparser.addoption(\n    \"--env\",\n    default=\"staging\",      # Your cozy testing playground\n    choices=[\n        \"staging\",          # 🧰 Safe space for experiments\n        \"prod\",            # 🏛 The real deal\n        \"uat\",             # 🕵️ Where users try to break things\n    ],\n    help=\"Pick your battlefield!\"\n)\n```\n\n### 2. 📖 Story-Telling Logs\nOur logs are not just logs - they tell a story! Each operation is a new adventure:\n\n```python\nself.logger.info(\"🔔 Starting a new car quest!\")\nself.logger.info(\"📡 Sending our request to the Cars Kingdom\")\nself.logger.info(f\"🎉 Victory! Got response with status: {response.status_code}\")\nself.logger.error(\"🚨 Oops! Something went wrong with our request\")\n```\n\n### 3. 🏆 Victory Tracking\nWe celebrate every win and learn from every challenge:\n\n```python\ndef success(self, message: str) -> None:\n    \"\"\"Celebrate another victory! 🎉\"\"\"\n    self.logger.info(f\"🟢 VICTORY: {message}\")\n    self.total += 1     # Another battle fought\n    self.passed += 1    # Another victory achieved!\n    \n    if self.passed % 10 == 0:\n        self.logger.info(\"🎁 Achievement unlocked: 10 tests passed!\")\n```\n\n### 4. 🎟️ Beautiful Reports\nWe don't just run tests - we create masterpieces! Check out our beautiful HTML reports and Allure magic:\n\n#### 🎊 Pytest HTML - The Classic Scroll\n\n```python\nconfig._metadata = {\n    'Project Name': '🚗 Cars API Testing',\n    'Environment': f\"🏛 {config.option.env.upper()}\",\n    'Test Hero': os.getenv('USER', 'Mystery Tester'),\n    'Powered By': f\"Python {sys.version.split()[0]} 🐍\",\n    'Quest Started': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n}\n```\n\n#### ✨ Allure Reports - The Magical Storybook 📖\n\nBut wait, there's more! 🎁 Our kingdom also uses the legendary Allure spell to craft enchanting test reports!\n\n```python\n@allure.story(\"Car Count Verification\")\n@allure.description(\"Test to verify that the car count increases correctly after adding a new car. This ensures the system's counting mechanism works properly.\")\n@allure.tag(\"API\", \"Cars\", \"Validation\")\n@allure.severity(allure.severity_level.NORMAL)\ndef test_verify_car_count(api_player_fixture, auth_details, initial_car_count):\n    # Our epic test continues here...\n```\n\nAllure isn't just a tool - it's storytelling magic! 🧙‍♂️✨\n\n- 🎭 **Epic Stories**: Group your tests into magnificent epics and user stories\n- 👀 **Visual Journey**: Generate beautiful dashboards that even the Royal Court will approve\n- 📊 **Magical Trends**: Track test stability and catch mischievous regression fairies\n- 📎 **Labels & Tags**: Organize tests with magical labels that make filtering a breeze\n- 📡 **Live Updates**: Watch your test results unfold like a real-time adventure\n\nWith Allure's enchanted decorators, each test becomes a chapter in your testing saga:\n\n- 🖼️ `@allure.feature` - The grand quest your test belongs to\n- 📝 `@allure.story` - The specific adventure within the quest\n- 💬 `@allure.description` - The tale of what your test accomplishes\n- 🏷️ `@allure.tag` - Magic keywords to find your test later\n- ⚠️ `@allure.severity` - How critical is this test to the kingdom's safety?\n\nRun your tests with this magic incantation to generate a report worthy of the Royal Archives:\n\n```bash\npytest --alluredir=./allure-results\nallure serve allure-results  # Open the magical portal to view reports\n```\n\n## 👑 Best Practices - Our Royal Decrees\n\n1. **📚 Clean Code is King**\n   - 🎉 Every class has its own castle (separation of concerns)\n   - 👑 Object-oriented design rules our kingdom\n   - 🌟 Type hints light the way for future explorers\n   - 📏 PEP 8 style guide is our royal standard:\n     - 🔤 Imports organized in groups (standard lib, third-party, local)\n     - 📦 Clear module-level docstrings\n     - 🎨 Consistent 4-space indentation\n     - 🎯 Maximum line length of 79 characters\n     - 🎭 Google-style docstrings for all functions\n   - 🏰 Code Architecture:\n     - 🎪 Single responsibility principle\n     - 🔄 DRY (Don't Repeat Yourself)\n     - 🎯 SOLID principles in class design\n     - 🎨 Consistent naming conventions (snake_case for functions/variables)\n   - 📚 Documentation:\n     - 📖 Clear and concise docstrings\n     - 🎯 Type hints for all parameters and returns\n     - 📝 Meaningful variable and function names\n\n2. **🛡️ Error Handling - Our Shield**\n   - 🏹 Custom exceptions for precise targeting\n   - 💬 Clear error messages that even dragons understand\n   - 🎯 Status codes are always validated\n\n3. **🏆 Test Results - Our Chronicles**\n   - 📈 Automatic tracking of every quest\n   - 📖 Detailed reports of our adventures\n   - ⏱️ Performance metrics for the speed demons\n\n4. **⚙️ Configuration - Our Master Plan**\n   - 🌍 Each environment gets its perfect setup\n   - 🎮 Easy controls through pytest options\n   - 📖 Logs that tell epic tales\n\n## 🎮 Let's Write Some Epic Tests!\n\nHere's how we embark on a quest to add a new car to our collection:\n\n```python\ndef test_add_new_tesla(api_player):\n    \"\"\"Quest: Add a shiny new Tesla to our collection 🚗⚡\"\"\"\n    # First, let's get our VIP pass 🎟️\n    auth_details = api_player.set_auth_details(\"hero\", \"secret_spell\")\n    \n    # Prepare our new Tesla for the grand entrance 🚘\n    car_details = {\n        \"name\": \"Model 3\",\n        \"brand\": \"Tesla\",\n        \"year\": 2023,\n        \"features\": [\"autopilot\", \"ludicrous_mode\"] 🚀\n    }\n    \n    # Time to add our electric beauty! ⚡\n    success, response = api_player.add_car(\n        car_details=car_details,\n        auth_details=auth_details\n    )\n    \n    # Let's check if our mission was successful 🎯\n    assert success, \"🚨 Oh no! Our Tesla couldn't join the party!\"\n    assert response[\"status\"] == \"success\", \"😵 Something's not right with our Tesla!\"\n    \n    # Celebrate our victory! 🎉\n    print(\"🎉 Woohoo! Tesla has joined our awesome car collection!\")\n```\n\n## 🤓 Cool Technical Stuff\n\n### 1. 🕵️ Smart Error Detection\nWe've got your back with intelligent error handling:\n```python\ndef validate_response(self, response: Response) -> Tuple[bool, str]:\n    \"\"\"Our magical response checker 🔮\"\"\"\n    status_code = response.status_code\n    result_flag = False\n    \n    # Time to decode what the API is telling us 🔍\n    error_messages = {\n        200: \"🎉 All good! Operation successful!\",\n        401: \"🔒 Oops! Looks like you forgot your magic key!\",\n        403: \"🚫 Sorry, this area is for VIPs only!\",\n        404: \"🔍 Hmm... We looked everywhere but couldn't find it!\",\n        500: \"💥 The server had a little accident...\"\n    }\n    \n    msg = error_messages.get(status_code, \"🤔 Something unexpected happened!\")\n    if status_code == 200:\n        result_flag = True\n    \n    return result_flag, msg\n```\n\n### 2. 🌈 Magic Decorators\nOur special spells (decorators) make life easier:\n```python\ndef log_operation(operation_name: str):\n    \"\"\"Adds some sparkle to our operations ✨\"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            logger = get_logger(\"Magic\")\n            logger.info(f\"🌟 Starting: {operation_name}\")\n            try:\n                result = func(*args, **kwargs)\n                logger.info(f\"🎉 Success: {operation_name}\")\n                return result\n            except Exception as e:\n                logger.error(f\"💥 Oops! {operation_name} failed: {str(e)}\")\n                raise\n        return wrapper\n    return decorator\n```\n\n### 3. 🔮 Anatomy of a Test: Add Car Adventure\nLet's peek behind the curtain of one of our magical test functions:\n\n```python\ndef test_add_car(api_player_fixture, auth_details) -> None:\n    \"\"\"Test the car addition functionality of the API. 🚗✨\"\"\"\n    # Get car details from our secret scroll 📜\n    car_details = conf.car_details\n    \n    # Time to summon a new car! 🧙‍♂️\n    result_flag, response = api_player_fixture.add_car(\n        car_details=car_details,\n        auth_details=auth_details\n    )\n    \n    # Record our adventure in the chronicles 📝\n    logger.info(f\"📣 Add car response: {response}\")\n    \n    # Check if our spell worked! ✅\n    assert result_flag, \"Car addition spell failed! 😱\"\n    assert response.get('successful') is True, (\n        \"The car refused to join our collection! 😭\"\n    )\n    \n    # Let's make sure our car actually arrived 🔍\n    _, cars_response = api_player_fixture.get_cars(auth_details)\n    logger.info(f\"🚗 Car collection status: {cars_response}\")\n    \n    # Find our newly summoned car in the collection 🎯\n    cars_list = cars_response.get('cars_list', [])\n    added_car = next(\n        (car for car in cars_list \n         if (car['name'] == car_details['name'] and \n             car['brand'] == car_details['brand'])),\n        None\n    )\n    \n    # Celebrate if our car is there! 🎉\n    assert added_car is not None, (\n        f\"Oh no! {car_details['name']} is missing from our collection! 🔍\"\n    )\n```\n\n🎭 **Behind the Scenes Magic** 🎭\n\nThis test is like a thrilling adventure movie 🎬 in three exciting acts:\n\n**Act 1: Preparation** 🧙‍♀️\n- Our hero, `api_player_fixture`, steps onto the stage (Thanks to pytest's fixture magic! ✨)\n- The sacred scroll of `auth_details` grants access to the kingdom's gates 🔑\n- `conf.car_details` reveals the blueprint for our new magical vehicle 📜\n\n**Act 2: The Quest** 🏰\n- The `add_car` spell is cast, sending our request to the API realm 📡\n- We eagerly await the response scroll to see if our car materialized 📬\n- The chronicles (logs) record every moment of our adventure for future bards 📚\n\n**Act 3: Verification** 🕵️‍♀️\n- First checkpoint: Did the API respond with \"success\"? 👍\n- Second mission: Let's gather ALL cars in the kingdom using `get_cars` 🏎️🏎️🏎️\n- Final challenge: Using the mystical `next()` function and a generator expression, we search for our newly created car in the royal collection 🔍\n- Victory dance if we find it! 💃\n\nThis test ensures our car creation spell works perfectly from start to finish, with no dragons 🐉 or bugs 🐛 getting in our way!\n\n### 4. 🧙‍♂️ Lambda Magic: The Secret Sauce\nEver wonder why we use lambdas in our API calls? Here's the magical answer:\n\n```python\nreturn self._execute_api_call(\n    \"add_car\", \n    lambda: self.cars_api.add_car(data=car_details, headers=headers)\n)\n```\n\nThis isn't just fancy code - it's wizardry! 🧙‍♂️✨\n\n- 🕰️ **Lazy Execution**: The lambda is like a spell waiting to be cast - it doesn't run until _execute_api_call decides it's time\n- 🛡️ **Error Shield**: Our _execute_api_call function can wrap the API call in protective magic (try/except) to catch any fireballs that might come our way\n- 📊 **Metrics Mastery**: We can measure how long spells take to cast and how much mana (resources) they consume\n- 🔄 **Retry Rituals**: If a spell fizzles, we can try casting it again without changing the original incantation\n- 📝 **Clean Scrolls**: Our code stays neat and tidy, with all the messy error handling hidden away in one magical place\n\nWithout lambda magic, we'd need to repeat the same protective spells around every API call. Instead, we can focus on crafting the perfect API requests while our lambda takes care of the rest! 🎩✨\n\n## 📍 Coming Soon to Our Kingdom!\n\n1. **🔥 Async Powers**\n   - 🌀 Tornado-fast parallel testing\n   - 🏃 Run tests at lightning speed\n   - 🚀 Handle multiple requests like a boss\n\n2. **📈 Performance Wizardry**\n   - 🏃 Load testing that'll blow your mind\n   - ⏱️ Response time tracking to the microsecond\n   - 📆 Beautiful performance dashboards\n\n3. **🔍 Contract Testing Magic**\n   - 📖 OpenAPI validation spells\n   - 🧪 Schema verification potions\n   - 🔐 Ironclad contract enforcement\n\n4. **🔒 Security Fortress**\n   - 🛡️ Fort Knox-level authentication tests\n   - 👮 Authorization checkpoints\n   - 🔓 Security headers that even hackers respect\n\n## 🌟 The Grand Finale\n\nThere you have it, fellow adventurers! 🚀 Our API testing framework is like a well-oiled machine (with a bit of magic sprinkled on top ✨). Here's what makes it awesome:\n\n- 🎉 Write tests that are fun and easy to read\n- 📊 Track your victories with style\n- 🌍 Switch environments like a ninja\n- 📖 Get reports that tell epic stories\n- 🤓 Smart error handling that speaks human\n\nRemember: Testing doesn't have to be boring! With our framework, every test is an adventure, every bug is a dragon to slay, and every passing test suite is a victory to celebrate! 🎉\n\n## 📖 Legendary Scrolls (References)\n\n1. [📡 The Python Requests Spellbook](https://docs.python-requests.org/)\n2. [🔮 The Pytest Chronicles](https://docs.pytest.org/)\n3. [📙 The API Testing Wisdom Scrolls](https://www.qasymphony.com/blog/api-testing-best-practices/)\n4. [🔍 Python Type Hints Grimoire](https://docs.python.org/3/library/typing.html)\n5. [🌐 RESTful API Design Legends](https://restfulapi.net/)\n\nNow go forth and test with style! 🌟✨","src/content/projects/test-automation-framework.md","e1d7e8038069bc55",{"html":170,"metadata":171},"\u003Ch1 id=\"-building-a-robust-api-test-automation-framework-with-python\">🚀 Building a Robust API Test Automation Framework with Python\u003C/h1>\n\u003Ch2 id=\"-table-of-contents\">📋 Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#-introduction\">Introduction\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-whats-in-it-for-you\">What’s in it for You?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-architecture-overview\">Architecture Overview\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#framework-layers-explained\">Framework Layers Explained\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#-meet-the-dream-team\">Meet the Dream Team\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#-the-commander-api-player-coreapi_playerpy\">The Commander: API Player\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-the-scorekeeper-results-tracking-utilsresultspy\">The Scorekeeper: Results Tracking\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-the-specialists-endpoint-classes\">The Specialists: Endpoint Classes\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-the-foundation-baseapi\">The Foundation: BaseAPI\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#-awesome-features\">Awesome Features\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#-environment-mastery\">Environment Mastery\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-beautiful-logs\">Beautiful Logs\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-victory-tracking\">Victory Tracking\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-allure-reports-integration\">Allure Reports Integration\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#-best-practices---our-royal-decrees\">Best Practices\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-lets-write-some-epic-tests\">Let’s Write Some Epic Tests\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-cool-technical-stuff\">Cool Technical Stuff\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#-smart-error-detection\">Smart Error Detection\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-retry-mechanism\">Retry Mechanism\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-test-breakdown\">Test Breakdown\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-lambda-magic-the-secret-sauce\">Lambda Magic\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#-coming-soon-to-our-kingdom\">Coming Soon to Our Kingdom\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-the-grand-finale\">The Grand Finale\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#-legendary-scrolls-references\">References\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"-introduction\">🎯 Introduction\u003C/h2>\n\u003Cp>Hey there, fellow automation enthusiasts! 👋 Ready to dive into something exciting? Today, I’m going to walk you through our super-cool API testing framework that I’ve built using Python. It’s like having a Swiss Army knife for API testing - versatile, reliable, and surprisingly elegant!\u003C/p>\n\u003Ch2 id=\"-whats-in-it-for-you\">🎮 What’s in it for You?\u003C/h2>\n\u003Cp>Before we dive deep, here’s what you’re going to get:\u003C/p>\n\u003Col>\n\u003Cli>🏗️ A rock-solid, maintainable testing framework\u003C/li>\n\u003Cli>📝 Beautiful logging that actually makes sense\u003C/li>\n\u003Cli>🌍 Support for all your environments (staging, prod, UAT)\u003C/li>\n\u003Cli>✨ Super easy test case creation\u003C/li>\n\u003Cli>📊 Test results that tell a story\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"-architecture-overview\">🏰 Architecture Overview\u003C/h2>\n\u003Cp>Our architecture follows a modular design pattern that makes it highly maintainable, readable, and extensible. Think of our framework as a well-organized castle, where each component has its specific role:\u003C/p>\n\u003Cp>\u003Cimg src=\"/PersonalWebsite/images/framework-architecture.png\" alt=\"Framework Architecture\">\u003C/p>\n\u003Ch3 id=\"framework-layers-explained\">Framework Layers Explained\u003C/h3>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Base API Layer\u003C/strong> 🌐\u003C/p>\n\u003Cul>\n\u003Cli>The foundation that handles all HTTP communications\u003C/li>\n\u003Cli>Implements wrappers for REST calls (GET, POST, PUT, DELETE)\u003C/li>\n\u003Cli>Manages request/response lifecycles and error handling\u003C/li>\n\u003Cli>Located in Core/base_api.py\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>API Player Layer\u003C/strong> 🎮\u003C/p>\n\u003Cul>\n\u003Cli>Orchestrates test actions and manages test state/context\u003C/li>\n\u003Cli>Interfaces directly with endpoint classes through composition\u003C/li>\n\u003Cli>Contains business logic and test-oriented wrappers\u003C/li>\n\u003Cli>Formats requests, processes responses, and handles errors\u003C/li>\n\u003Cli>Maintains session information and authentication\u003C/li>\n\u003Cli>Located in Core/api_player.py\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Endpoints Layer\u003C/strong> 🔌\u003C/p>\n\u003Cul>\n\u003Cli>Abstracts the endpoints of the application under test\u003C/li>\n\u003Cli>One class per feature area (e.g., CarsAPIEndpoints, RegistrationAPIEndpoints)\u003C/li>\n\u003Cli>Maps directly to the application’s API structure\u003C/li>\n\u003Cli>No business logic, only endpoint definitions and basic request formatting\u003C/li>\n\u003Cli>Located in Endpoints directory\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Results Tracking Layer\u003C/strong> 📊\u003C/p>\n\u003Cul>\n\u003Cli>Tracks test outcomes and provides detailed reporting\u003C/li>\n\u003Cli>Manages logging and result collection\u003C/li>\n\u003Cli>Helps generate meaningful test reports\u003C/li>\n\u003Cli>Located in Utils/results.py\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"-meet-the-dream-team\">🎮 Meet the Dream Team\u003C/h2>\n\u003Ch3 id=\"1--the-commander-api-player-coreapi_playerpy\">1. 🎯 The Commander: API Player (Core/api_player.py)\u003C/h3>\n\u003Cp>Meet our superstar - the APIPlayer class! This is the heart of our framework and the layer most test cases interact with directly. It serves as an interface between test cases and the endpoint classes while maintaining test context/state.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">class\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> APIPlayer\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">Results\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"The mastermind behind all API operations 🤓\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#BD93F9\"> __init__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">url\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">log_file_path\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Optional[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> None\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">                 environment\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">staging\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        # First, let's set up our result tracking superpowers!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD;font-style:italic\">        super\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#BD93F9\">__init__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">log_file_path\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">log_file_path)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        # Which battlefield are we on? 🌍\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.environment \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> environment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> get_logger(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">APIPlayer\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        # Direct composition of endpoint classes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.cars_api \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> CarsAPIEndpoints(url)      \u003C/span>\u003Cspan style=\"color:#6272A4\"># For all things cars\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.users_api \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> UserAPIEndpoints(url)      \u003C/span>\u003Cspan style=\"color:#6272A4\"># Managing our users\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.registration_api \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> RegistrationAPIEndpoints(url)  \u003C/span>\u003Cspan style=\"color:#6272A4\"># Handling registrations\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"key-responsibilities\">Key Responsibilities\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>State Management\u003C/strong> 💾\u003C/p>\n\u003Cul>\n\u003Cli>Maintains test context and session information\u003C/li>\n\u003Cli>Tracks test state across multiple API calls\u003C/li>\n\u003Cli>Stores authentication details and headers\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Business Logic\u003C/strong> 🛠️\u003C/p>\n\u003Cul>\n\u003Cli>Contains wrappers around commonly used API operations\u003C/li>\n\u003Cli>Implements test-specific logic that combines multiple API calls\u003C/li>\n\u003Cli>Provides higher-level operations that abstract complex flows\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Error Handling\u003C/strong> 🚫\u003C/p>\n\u003Cul>\n\u003Cli>Centralizes error detection and recovery\u003C/li>\n\u003Cli>Implements common validation patterns\u003C/li>\n\u003Cli>Provides consistent error reporting\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Result Processing\u003C/strong> 📈\u003C/p>\n\u003Cul>\n\u003Cli>Formats API responses for test consumption\u003C/li>\n\u003Cli>Extracts relevant data from responses\u003C/li>\n\u003Cli>Enhances logging with contextual information\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Here’s a sample of how it processes API calls:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> get_cars\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">auth_details\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Optional[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> None\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Tuple[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">bool\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, Dict[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, Any]]:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Fetches the list of available cars.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    Args:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        auth_details: Authentication credentials (optional)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    Returns:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        Tuple containing success flag and response data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Prepare headers with authentication\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    headers \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">._prepare_headers(auth_details)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Log what we're about to do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">    self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"📝 Request parameters: headers=\u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">headers\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Execute the API call with error handling\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">._execute_api_call(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">get_cars\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        lambda\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.cars_api.get_cars(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">headers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    )\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2--the-scorekeeper-results-tracking-utilsresultspy\">2. 📈 The Scorekeeper: Results Tracking (Utils/results.py)\u003C/h3>\n\u003Cp>Meet our meticulous scorekeeper! This little genius keeps track of everything that happens in our tests:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">class\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> Results\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Your friendly neighborhood test tracker 📊\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#BD93F9\"> __init__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">log_file_path\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Optional[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> None\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        # Get our trusty logger ready 📖\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> get_logger(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">results\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        # Initialize our scoreboard 🏆\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.total \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 0\u003C/span>\u003Cspan style=\"color:#6272A4\">      # Total battles fought\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.passed \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 0\u003C/span>\u003Cspan style=\"color:#6272A4\">      # Victories achieved\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.failures \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> []   \u003C/span>\u003Cspan style=\"color:#6272A4\"># Lessons learned 📝\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3--the-specialists-endpoint-classes\">3. 🔌 The Specialists: Endpoint Classes\u003C/h3>\n\u003Cp>Here come our API specialists! Each one is an expert in their domain, following the Endpoint Layer pattern in our framework. These classes abstract the application’s API endpoints without containing any business or test logic. Each feature area has its own dedicated endpoint class.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">class\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> CarsAPIEndpoints\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">BaseAPI\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Your gateway to the world of cars 🚗\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#BD93F9\"> __init__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">base_url\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD;font-style:italic\">        super\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#BD93F9\">__init__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(base_url)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> get_logger(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">CarsAPI\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> cars_url\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">suffix\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#E9F284\"> ''\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \"\"\"Append API endpoint to base URL\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#FF79C6\"> f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.base_url\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">/cars/\u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">suffix\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> get_cars\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Dict[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Response:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \"\"\"Fetch our amazing car collection 🚘\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        url \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.cars_url()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.debug(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"GET request to \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">url\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.get(url, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">headers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> get_car\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">params\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Dict[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">], \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Dict[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Response:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \"\"\"Get details for a specific car\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        url \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.cars_url()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.get(url, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">params\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">params, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">headers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> add_car\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">data\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Dict[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, Any], \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Dict[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Response:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \"\"\"Add a new car to the system\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        url \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.cars_url()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.post(url, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">json\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">data, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">headers)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"endpoint-class-features\">Endpoint Class Features\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Pure API Mapping\u003C/strong> 🗺️\u003C/p>\n\u003Cul>\n\u003Cli>Each method maps to exactly one API endpoint\u003C/li>\n\u003Cli>Methods handle URL construction and parameter formatting\u003C/li>\n\u003Cli>Simple 1:1 relationship with the API’s structure\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Clean Separation\u003C/strong> ✂️\u003C/p>\n\u003Cul>\n\u003Cli>No business logic in endpoint classes\u003C/li>\n\u003Cli>No test assertions or validations\u003C/li>\n\u003Cli>Focused solely on API communication\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Composition Over Inheritance\u003C/strong> 🧲\u003C/p>\n\u003Cul>\n\u003Cli>All endpoint classes inherit from BaseAPI for core functionality\u003C/li>\n\u003Cli>API Player accesses endpoints through composition\u003C/li>\n\u003Cli>Each class handles one specific domain area\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"4--the-foundation-baseapi\">4. 🌐 The Foundation: BaseAPI\u003C/h3>\n\u003Cp>This is the foundation of our API communication that handles the core HTTP operations and provides wrappers around requests library:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">class\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> BaseAPI\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Base class for API communications 🌐\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#BD93F9\"> __init__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">base_url\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">timeout\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> int\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 30\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \"\"\"Initialize with a requests Session for connection pooling\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.base_url \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> base_url\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> requests.Session()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.timeout \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> timeout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        # Configure retry strategy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        adapter \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> HTTPAdapter(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">            max_retries\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">retry_strategy,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">            pool_connections\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\">10\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">            pool_maxsize\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\">10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.mount(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">http://\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, adapter)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.mount(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">https://\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, adapter)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#BD93F9\"> __del__\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">        \"\"\"Close session when object is destroyed\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        if\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> hasattr\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">session\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">            self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.session.close()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"baseapi-features\">BaseAPI Features\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Connection Efficiency\u003C/strong> 🚄\u003C/p>\n\u003Cul>\n\u003Cli>Uses connection pooling for better performance\u003C/li>\n\u003Cli>Implements retry strategy for transient failures\u003C/li>\n\u003Cli>Manages session lifecycle automatically\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Error Handling\u003C/strong> 🛡️\u003C/p>\n\u003Cul>\n\u003Cli>Common error handling for HTTP errors\u003C/li>\n\u003Cli>Consistent response processing\u003C/li>\n\u003Cli>Built-in timeout management\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Resource Management\u003C/strong> 🧹\u003C/p>\n\u003Cul>\n\u003Cli>Properly closes connections when done\u003C/li>\n\u003Cli>Prevents resource leaks with proper teardown\u003C/li>\n\u003Cli>Optimizes connection reuse\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"-awesome-features\">✨ Awesome Features\u003C/h2>\n\u003Ch3 id=\"1--environment-mastery\">1. 🌍 Environment Mastery\u003C/h3>\n\u003Cp>We’ve got all your environments covered! Switch between them as easily as changing TV channels:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">parser.addoption(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">--env\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">    default\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">staging\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,      \u003C/span>\u003Cspan style=\"color:#6272A4\"># Your cozy testing playground\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">    choices\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">staging\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,          \u003C/span>\u003Cspan style=\"color:#6272A4\"># 🧰 Safe space for experiments\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">prod\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,            \u003C/span>\u003Cspan style=\"color:#6272A4\"># 🏛 The real deal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">uat\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,             \u003C/span>\u003Cspan style=\"color:#6272A4\"># 🕵️ Where users try to break things\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">    help\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Pick your battlefield!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2--story-telling-logs\">2. 📖 Story-Telling Logs\u003C/h3>\n\u003Cp>Our logs are not just logs - they tell a story! Each operation is a new adventure:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.info(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🔔 Starting a new car quest!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.info(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">📡 Sending our request to the Cars Kingdom\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"🎉 Victory! Got response with status: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">response.status_code\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.error(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🚨 Oops! Something went wrong with our request\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3--victory-tracking\">3. 🏆 Victory Tracking\u003C/h3>\n\u003Cp>We celebrate every win and learn from every challenge:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> success\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">message\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#BD93F9\"> None\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Celebrate another victory! 🎉\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">    self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"🟢 VICTORY: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">message\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">    self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.total \u003C/span>\u003Cspan style=\"color:#FF79C6\">+=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 1\u003C/span>\u003Cspan style=\"color:#6272A4\">     # Another battle fought\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">    self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.passed \u003C/span>\u003Cspan style=\"color:#FF79C6\">+=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 1\u003C/span>\u003Cspan style=\"color:#6272A4\">    # Another victory achieved!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    if\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.passed \u003C/span>\u003Cspan style=\"color:#FF79C6\">%\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 10\u003C/span>\u003Cspan style=\"color:#FF79C6\"> ==\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.logger.info(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🎁 Achievement unlocked: 10 tests passed!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"4-️-beautiful-reports\">4. 🎟️ Beautiful Reports\u003C/h3>\n\u003Cp>We don’t just run tests - we create masterpieces! Check out our beautiful HTML reports and Allure magic:\u003C/p>\n\u003Ch4 id=\"-pytest-html---the-classic-scroll\">🎊 Pytest HTML - The Classic Scroll\u003C/h4>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">config._metadata \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    '\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Project Name\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🚗 Cars API Testing\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    '\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Environment\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"🏛 \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">config.option.env.upper()\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    '\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Test Hero\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: os.getenv(\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">USER\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Mystery Tester\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    '\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Powered By\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"Python \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">sys.version.split()[\u003C/span>\u003Cspan style=\"color:#BD93F9\">0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> 🐍\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    '\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Quest Started\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: datetime.now().strftime(\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">%Y-%m-\u003C/span>\u003Cspan style=\"color:#BD93F9\">%d\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> %H:%M:%S\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"-allure-reports---the-magical-storybook\">✨ Allure Reports - The Magical Storybook 📖\u003C/h4>\n\u003Cp>But wait, there’s more! 🎁 Our kingdom also uses the legendary Allure spell to craft enchanting test reports!\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">@allure.story\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Car Count Verification\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">@allure.description\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Test to verify that the car count increases correctly after adding a new car. This ensures the system's counting mechanism works properly.\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">@allure.tag\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">API\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Cars\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Validation\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">@allure.severity\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(allure.severity_level.\u003C/span>\u003Cspan style=\"color:#BD93F9\">NORMAL\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> test_verify_car_count\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">api_player_fixture\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">auth_details\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">initial_car_count\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Our epic test continues here...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Allure isn’t just a tool - it’s storytelling magic! 🧙‍♂️✨\u003C/p>\n\u003Cul>\n\u003Cli>🎭 \u003Cstrong>Epic Stories\u003C/strong>: Group your tests into magnificent epics and user stories\u003C/li>\n\u003Cli>👀 \u003Cstrong>Visual Journey\u003C/strong>: Generate beautiful dashboards that even the Royal Court will approve\u003C/li>\n\u003Cli>📊 \u003Cstrong>Magical Trends\u003C/strong>: Track test stability and catch mischievous regression fairies\u003C/li>\n\u003Cli>📎 \u003Cstrong>Labels &#x26; Tags\u003C/strong>: Organize tests with magical labels that make filtering a breeze\u003C/li>\n\u003Cli>📡 \u003Cstrong>Live Updates\u003C/strong>: Watch your test results unfold like a real-time adventure\u003C/li>\n\u003C/ul>\n\u003Cp>With Allure’s enchanted decorators, each test becomes a chapter in your testing saga:\u003C/p>\n\u003Cul>\n\u003Cli>🖼️ \u003Ccode>@allure.feature\u003C/code> - The grand quest your test belongs to\u003C/li>\n\u003Cli>📝 \u003Ccode>@allure.story\u003C/code> - The specific adventure within the quest\u003C/li>\n\u003Cli>💬 \u003Ccode>@allure.description\u003C/code> - The tale of what your test accomplishes\u003C/li>\n\u003Cli>🏷️ \u003Ccode>@allure.tag\u003C/code> - Magic keywords to find your test later\u003C/li>\n\u003Cli>⚠️ \u003Ccode>@allure.severity\u003C/code> - How critical is this test to the kingdom’s safety?\u003C/li>\n\u003C/ul>\n\u003Cp>Run your tests with this magic incantation to generate a report worthy of the Royal Archives:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">pytest\u003C/span>\u003Cspan style=\"color:#BD93F9\"> --alluredir=./allure-results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">allure\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> serve\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> allure-results\u003C/span>\u003Cspan style=\"color:#6272A4\">  # Open the magical portal to view reports\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-best-practices---our-royal-decrees\">👑 Best Practices - Our Royal Decrees\u003C/h2>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>📚 Clean Code is King\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>🎉 Every class has its own castle (separation of concerns)\u003C/li>\n\u003Cli>👑 Object-oriented design rules our kingdom\u003C/li>\n\u003Cli>🌟 Type hints light the way for future explorers\u003C/li>\n\u003Cli>📏 PEP 8 style guide is our royal standard:\n\u003Cul>\n\u003Cli>🔤 Imports organized in groups (standard lib, third-party, local)\u003C/li>\n\u003Cli>📦 Clear module-level docstrings\u003C/li>\n\u003Cli>🎨 Consistent 4-space indentation\u003C/li>\n\u003Cli>🎯 Maximum line length of 79 characters\u003C/li>\n\u003Cli>🎭 Google-style docstrings for all functions\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>🏰 Code Architecture:\n\u003Cul>\n\u003Cli>🎪 Single responsibility principle\u003C/li>\n\u003Cli>🔄 DRY (Don’t Repeat Yourself)\u003C/li>\n\u003Cli>🎯 SOLID principles in class design\u003C/li>\n\u003Cli>🎨 Consistent naming conventions (snake_case for functions/variables)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>📚 Documentation:\n\u003Cul>\n\u003Cli>📖 Clear and concise docstrings\u003C/li>\n\u003Cli>🎯 Type hints for all parameters and returns\u003C/li>\n\u003Cli>📝 Meaningful variable and function names\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>🛡️ Error Handling - Our Shield\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>🏹 Custom exceptions for precise targeting\u003C/li>\n\u003Cli>💬 Clear error messages that even dragons understand\u003C/li>\n\u003Cli>🎯 Status codes are always validated\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>🏆 Test Results - Our Chronicles\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>📈 Automatic tracking of every quest\u003C/li>\n\u003Cli>📖 Detailed reports of our adventures\u003C/li>\n\u003Cli>⏱️ Performance metrics for the speed demons\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>⚙️ Configuration - Our Master Plan\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>🌍 Each environment gets its perfect setup\u003C/li>\n\u003Cli>🎮 Easy controls through pytest options\u003C/li>\n\u003Cli>📖 Logs that tell epic tales\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"-lets-write-some-epic-tests\">🎮 Let’s Write Some Epic Tests!\u003C/h2>\n\u003Cp>Here’s how we embark on a quest to add a new car to our collection:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> test_add_new_tesla\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">api_player\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Quest: Add a shiny new Tesla to our collection 🚗⚡\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # First, let's get our VIP pass 🎟️\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    auth_details \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> api_player.set_auth_details(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">hero\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">secret_spell\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Prepare our new Tesla for the grand entrance 🚘\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    car_details \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">name\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Model 3\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">brand\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Tesla\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">year\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#BD93F9\">2023\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">features\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: [\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">autopilot\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">ludicrous_mode\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] 🚀\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Time to add our electric beauty! ⚡\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    success, response \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> api_player.add_car(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">        car_details\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">car_details,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">        auth_details\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">auth_details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Let's check if our mission was successful 🎯\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    assert\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> success, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🚨 Oh no! Our Tesla couldn't join the party!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    assert\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> response[\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">status\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">==\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">success\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">😵 Something's not right with our Tesla!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Celebrate our victory! 🎉\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">    print\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🎉 Woohoo! Tesla has joined our awesome car collection!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-cool-technical-stuff\">🤓 Cool Technical Stuff\u003C/h2>\n\u003Ch3 id=\"1-️-smart-error-detection\">1. 🕵️ Smart Error Detection\u003C/h3>\n\u003Cp>We’ve got your back with intelligent error handling:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> validate_response\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">response\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Response) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Tuple[\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">bool\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Our magical response checker 🔮\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    status_code \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> response.status_code\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    result_flag \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> False\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Time to decode what the API is telling us 🔍\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    error_messages \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">        200\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🎉 All good! Operation successful!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">        401\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🔒 Oops! Looks like you forgot your magic key!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">        403\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🚫 Sorry, this area is for VIPs only!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">        404\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🔍 Hmm... We looked everywhere but couldn't find it!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">        500\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">💥 The server had a little accident...\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    msg \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> error_messages.get(status_code, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">🤔 Something unexpected happened!\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> status_code \u003C/span>\u003Cspan style=\"color:#FF79C6\">==\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 200\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        result_flag \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> True\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> result_flag, msg\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2--magic-decorators\">2. 🌈 Magic Decorators\u003C/h3>\n\u003Cp>Our special spells (decorators) make life easier:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> log_operation\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">operation_name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Adds some sparkle to our operations ✨\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> decorator\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">func\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> wrapper\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FF79C6\">*\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">args\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FF79C6\">**\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">kwargs\u003C/span>\u003Cspan style=\"color:#F8F8F2\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">            logger \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> get_logger(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Magic\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">            logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"🌟 Starting: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">operation_name\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">            try\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">                result \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> func(\u003C/span>\u003Cspan style=\"color:#FF79C6\">*\u003C/span>\u003Cspan style=\"color:#F8F8F2\">args, \u003C/span>\u003Cspan style=\"color:#FF79C6\">**\u003C/span>\u003Cspan style=\"color:#F8F8F2\">kwargs)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">                logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"🎉 Success: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">operation_name\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">                return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">            except\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> Exception\u003C/span>\u003Cspan style=\"color:#FF79C6\"> as\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> e:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">                logger.error(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"💥 Oops! \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">operation_name\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> failed: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">str\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(e)\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">                raise\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> wrapper\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> decorator\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3--anatomy-of-a-test-add-car-adventure\">3. 🔮 Anatomy of a Test: Add Car Adventure\u003C/h3>\n\u003Cp>Let’s peek behind the curtain of one of our magical test functions:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">def\u003C/span>\u003Cspan style=\"color:#50FA7B\"> test_add_car\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">api_player_fixture\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">auth_details\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">->\u003C/span>\u003Cspan style=\"color:#BD93F9\"> None\u003C/span>\u003Cspan style=\"color:#F8F8F2\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    \"\"\"Test the car addition functionality of the API. 🚗✨\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Get car details from our secret scroll 📜\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    car_details \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> conf.car_details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Time to summon a new car! 🧙‍♂️\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    result_flag, response \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> api_player_fixture.add_car(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">        car_details\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">car_details,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">        auth_details\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">auth_details\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Record our adventure in the chronicles 📝\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"📣 Add car response: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">response\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Check if our spell worked! ✅\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    assert\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> result_flag, \u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Car addition spell failed! 😱\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    assert\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> response.get(\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">successful\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">is\u003C/span>\u003Cspan style=\"color:#BD93F9\"> True\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">The car refused to join our collection! 😭\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Let's make sure our car actually arrived 🔍\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    _, cars_response \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> api_player_fixture.get_cars(auth_details)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    logger.info(\u003C/span>\u003Cspan style=\"color:#FF79C6\">f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"🚗 Car collection status: \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">cars_response\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Find our newly summoned car in the collection 🎯\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    cars_list \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> cars_response.get(\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">cars_list\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, [])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    added_car \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> next\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        (car \u003C/span>\u003Cspan style=\"color:#FF79C6\">for\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> car \u003C/span>\u003Cspan style=\"color:#FF79C6\">in\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> cars_list \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">         if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (car[\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">name\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">==\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> car_details[\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">name\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">and\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">             car[\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">brand\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">==\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> car_details[\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">brand\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">])),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">        None\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">    # Celebrate if our car is there! 🎉\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    assert\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> added_car \u003C/span>\u003Cspan style=\"color:#FF79C6\">is\u003C/span>\u003Cspan style=\"color:#FF79C6\"> not\u003C/span>\u003Cspan style=\"color:#BD93F9\"> None\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        f\u003C/span>\u003Cspan style=\"color:#F1FA8C\">\"Oh no! \u003C/span>\u003Cspan style=\"color:#BD93F9\">{\u003C/span>\u003Cspan style=\"color:#F8F8F2\">car_details[\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F1FA8C\">name\u003C/span>\u003Cspan style=\"color:#E9F284\">'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003Cspan style=\"color:#BD93F9\">}\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> is missing from our collection! 🔍\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    )\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>🎭 \u003Cstrong>Behind the Scenes Magic\u003C/strong> 🎭\u003C/p>\n\u003Cp>This test is like a thrilling adventure movie 🎬 in three exciting acts:\u003C/p>\n\u003Cp>\u003Cstrong>Act 1: Preparation\u003C/strong> 🧙‍♀️\u003C/p>\n\u003Cul>\n\u003Cli>Our hero, \u003Ccode>api_player_fixture\u003C/code>, steps onto the stage (Thanks to pytest’s fixture magic! ✨)\u003C/li>\n\u003Cli>The sacred scroll of \u003Ccode>auth_details\u003C/code> grants access to the kingdom’s gates 🔑\u003C/li>\n\u003Cli>\u003Ccode>conf.car_details\u003C/code> reveals the blueprint for our new magical vehicle 📜\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Act 2: The Quest\u003C/strong> 🏰\u003C/p>\n\u003Cul>\n\u003Cli>The \u003Ccode>add_car\u003C/code> spell is cast, sending our request to the API realm 📡\u003C/li>\n\u003Cli>We eagerly await the response scroll to see if our car materialized 📬\u003C/li>\n\u003Cli>The chronicles (logs) record every moment of our adventure for future bards 📚\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Act 3: Verification\u003C/strong> 🕵️‍♀️\u003C/p>\n\u003Cul>\n\u003Cli>First checkpoint: Did the API respond with “success”? 👍\u003C/li>\n\u003Cli>Second mission: Let’s gather ALL cars in the kingdom using \u003Ccode>get_cars\u003C/code> 🏎️🏎️🏎️\u003C/li>\n\u003Cli>Final challenge: Using the mystical \u003Ccode>next()\u003C/code> function and a generator expression, we search for our newly created car in the royal collection 🔍\u003C/li>\n\u003Cli>Victory dance if we find it! 💃\u003C/li>\n\u003C/ul>\n\u003Cp>This test ensures our car creation spell works perfectly from start to finish, with no dragons 🐉 or bugs 🐛 getting in our way!\u003C/p>\n\u003Ch3 id=\"4-️-lambda-magic-the-secret-sauce\">4. 🧙‍♂️ Lambda Magic: The Secret Sauce\u003C/h3>\n\u003Cp>Ever wonder why we use lambdas in our API calls? Here’s the magical answer:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">return\u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\"> self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">._execute_api_call(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">    \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">add_car\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    lambda\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">self\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.cars_api.add_car(\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">data\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">car_details, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">headers\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">headers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This isn’t just fancy code - it’s wizardry! 🧙‍♂️✨\u003C/p>\n\u003Cul>\n\u003Cli>🕰️ \u003Cstrong>Lazy Execution\u003C/strong>: The lambda is like a spell waiting to be cast - it doesn’t run until _execute_api_call decides it’s time\u003C/li>\n\u003Cli>🛡️ \u003Cstrong>Error Shield\u003C/strong>: Our _execute_api_call function can wrap the API call in protective magic (try/except) to catch any fireballs that might come our way\u003C/li>\n\u003Cli>📊 \u003Cstrong>Metrics Mastery\u003C/strong>: We can measure how long spells take to cast and how much mana (resources) they consume\u003C/li>\n\u003Cli>🔄 \u003Cstrong>Retry Rituals\u003C/strong>: If a spell fizzles, we can try casting it again without changing the original incantation\u003C/li>\n\u003Cli>📝 \u003Cstrong>Clean Scrolls\u003C/strong>: Our code stays neat and tidy, with all the messy error handling hidden away in one magical place\u003C/li>\n\u003C/ul>\n\u003Cp>Without lambda magic, we’d need to repeat the same protective spells around every API call. Instead, we can focus on crafting the perfect API requests while our lambda takes care of the rest! 🎩✨\u003C/p>\n\u003Ch2 id=\"-coming-soon-to-our-kingdom\">📍 Coming Soon to Our Kingdom!\u003C/h2>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>🔥 Async Powers\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>🌀 Tornado-fast parallel testing\u003C/li>\n\u003Cli>🏃 Run tests at lightning speed\u003C/li>\n\u003Cli>🚀 Handle multiple requests like a boss\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>📈 Performance Wizardry\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>🏃 Load testing that’ll blow your mind\u003C/li>\n\u003Cli>⏱️ Response time tracking to the microsecond\u003C/li>\n\u003Cli>📆 Beautiful performance dashboards\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>🔍 Contract Testing Magic\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>📖 OpenAPI validation spells\u003C/li>\n\u003Cli>🧪 Schema verification potions\u003C/li>\n\u003Cli>🔐 Ironclad contract enforcement\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>🔒 Security Fortress\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>🛡️ Fort Knox-level authentication tests\u003C/li>\n\u003Cli>👮 Authorization checkpoints\u003C/li>\n\u003Cli>🔓 Security headers that even hackers respect\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"-the-grand-finale\">🌟 The Grand Finale\u003C/h2>\n\u003Cp>There you have it, fellow adventurers! 🚀 Our API testing framework is like a well-oiled machine (with a bit of magic sprinkled on top ✨). Here’s what makes it awesome:\u003C/p>\n\u003Cul>\n\u003Cli>🎉 Write tests that are fun and easy to read\u003C/li>\n\u003Cli>📊 Track your victories with style\u003C/li>\n\u003Cli>🌍 Switch environments like a ninja\u003C/li>\n\u003Cli>📖 Get reports that tell epic stories\u003C/li>\n\u003Cli>🤓 Smart error handling that speaks human\u003C/li>\n\u003C/ul>\n\u003Cp>Remember: Testing doesn’t have to be boring! With our framework, every test is an adventure, every bug is a dragon to slay, and every passing test suite is a victory to celebrate! 🎉\u003C/p>\n\u003Ch2 id=\"-legendary-scrolls-references\">📖 Legendary Scrolls (References)\u003C/h2>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://docs.python-requests.org/\">📡 The Python Requests Spellbook\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://docs.pytest.org/\">🔮 The Pytest Chronicles\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.qasymphony.com/blog/api-testing-best-practices/\">📙 The API Testing Wisdom Scrolls\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://docs.python.org/3/library/typing.html\">🔍 Python Type Hints Grimoire\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://restfulapi.net/\">🌐 RESTful API Design Legends\u003C/a>\u003C/li>\n\u003C/ol>\n\u003Cp>Now go forth and test with style! 🌟✨\u003C/p>",{"headings":172,"localImagePaths":269,"remoteImagePaths":270,"frontmatter":271,"imagePaths":278},[173,177,180,183,186,189,193,196,199,203,206,209,212,215,218,221,224,227,230,233,236,239,242,245,248,251,254,257,260,263,266],{"depth":174,"slug":175,"text":176},1,"-building-a-robust-api-test-automation-framework-with-python","🚀 Building a Robust API Test Automation Framework with Python",{"depth":130,"slug":178,"text":179},"-table-of-contents","📋 Table of Contents",{"depth":130,"slug":181,"text":182},"-introduction","🎯 Introduction",{"depth":130,"slug":184,"text":185},"-whats-in-it-for-you","🎮 What’s in it for You?",{"depth":130,"slug":187,"text":188},"-architecture-overview","🏰 Architecture Overview",{"depth":190,"slug":191,"text":192},3,"framework-layers-explained","Framework Layers Explained",{"depth":130,"slug":194,"text":195},"-meet-the-dream-team","🎮 Meet the Dream Team",{"depth":190,"slug":197,"text":198},"1--the-commander-api-player-coreapi_playerpy","1. 🎯 The Commander: API Player (Core/api_player.py)",{"depth":200,"slug":201,"text":202},4,"key-responsibilities","Key Responsibilities",{"depth":190,"slug":204,"text":205},"2--the-scorekeeper-results-tracking-utilsresultspy","2. 📈 The Scorekeeper: Results Tracking (Utils/results.py)",{"depth":190,"slug":207,"text":208},"3--the-specialists-endpoint-classes","3. 🔌 The Specialists: Endpoint Classes",{"depth":200,"slug":210,"text":211},"endpoint-class-features","Endpoint Class Features",{"depth":190,"slug":213,"text":214},"4--the-foundation-baseapi","4. 🌐 The Foundation: BaseAPI",{"depth":200,"slug":216,"text":217},"baseapi-features","BaseAPI Features",{"depth":130,"slug":219,"text":220},"-awesome-features","✨ Awesome Features",{"depth":190,"slug":222,"text":223},"1--environment-mastery","1. 🌍 Environment Mastery",{"depth":190,"slug":225,"text":226},"2--story-telling-logs","2. 📖 Story-Telling Logs",{"depth":190,"slug":228,"text":229},"3--victory-tracking","3. 🏆 Victory Tracking",{"depth":190,"slug":231,"text":232},"4-️-beautiful-reports","4. 🎟️ Beautiful Reports",{"depth":200,"slug":234,"text":235},"-pytest-html---the-classic-scroll","🎊 Pytest HTML - The Classic Scroll",{"depth":200,"slug":237,"text":238},"-allure-reports---the-magical-storybook","✨ Allure Reports - The Magical Storybook 📖",{"depth":130,"slug":240,"text":241},"-best-practices---our-royal-decrees","👑 Best Practices - Our Royal Decrees",{"depth":130,"slug":243,"text":244},"-lets-write-some-epic-tests","🎮 Let’s Write Some Epic Tests!",{"depth":130,"slug":246,"text":247},"-cool-technical-stuff","🤓 Cool Technical Stuff",{"depth":190,"slug":249,"text":250},"1-️-smart-error-detection","1. 🕵️ Smart Error Detection",{"depth":190,"slug":252,"text":253},"2--magic-decorators","2. 🌈 Magic Decorators",{"depth":190,"slug":255,"text":256},"3--anatomy-of-a-test-add-car-adventure","3. 🔮 Anatomy of a Test: Add Car Adventure",{"depth":190,"slug":258,"text":259},"4-️-lambda-magic-the-secret-sauce","4. 🧙‍♂️ Lambda Magic: The Secret Sauce",{"depth":130,"slug":261,"text":262},"-coming-soon-to-our-kingdom","📍 Coming Soon to Our Kingdom!",{"depth":130,"slug":264,"text":265},"-the-grand-finale","🌟 The Grand Finale",{"depth":130,"slug":267,"text":268},"-legendary-scrolls-references","📖 Legendary Scrolls (References)",[],[],{"title":154,"description":155,"techStack":272,"github":118,"featured":163,"completed":277,"category":165},{"language":273,"framework":274,"reporting":275,"cicd":276},[69],[159,160],[115],[117],["Date","2024-12-15T00:00:00.000Z"],[],"test-automation-framework.md","blog",["Map",282,283],"selenium-best-practices",{"id":282,"data":284,"body":290,"filePath":291,"digest":292,"rendered":293,"legacyId":320},{"title":285,"date":286,"author":287,"tags":288},"Best Practices for Selenium Test Automation",["Date","2025-04-27T00:00:00.000Z"],"Rohit",[289,165,121],"selenium","# Best Practices for Selenium Test Automation\n\nAs an SDET with years of experience in test automation, I've learned several valuable lessons about creating maintainable and reliable Selenium test suites. Here are some key best practices to follow:\n\n## 1. Use Page Object Model\n\nThe Page Object Model (POM) is a design pattern that creates an object repository for storing all web elements. It helps reduce code duplication and improves test maintenance.\n\n```java\npublic class LoginPage {\n    private WebDriver driver;\n    \n    @FindBy(id = \"username\")\n    private WebElement usernameField;\n    \n    @FindBy(id = \"password\")\n    private WebElement passwordField;\n    \n    public LoginPage(WebDriver driver) {\n        this.driver = driver;\n        PageFactory.initElements(driver, this);\n    }\n    \n    public void login(String username, String password) {\n        usernameField.sendKeys(username);\n        passwordField.sendKeys(password);\n        passwordField.submit();\n    }\n}\n```\n\n## 2. Implement Proper Wait Strategies\n\nAlways use explicit waits instead of implicit waits. They provide better control and make tests more reliable.\n\n```java\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\nWebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id(\"submit\")));\n```\n\n## 3. Use Test Data Management\n\nExternalize test data using JSON or Excel files. This makes tests more maintainable and allows for easy data updates.\n\n## 4. Implement Proper Reporting\n\nUse tools like ExtentReports or Allure for detailed test reporting. Good reports help in quick problem identification.\n\nRemember: The key to successful test automation is writing maintainable, reliable, and scalable tests.\n\n## 5. Use Proper Exception Handling\n\nImplement proper exception handling to handle unexpected errors and improve test stability.","src/content/blog/selenium-best-practices.md","498d462221ccd5c3",{"html":294,"metadata":295},"\u003Ch1 id=\"best-practices-for-selenium-test-automation\">Best Practices for Selenium Test Automation\u003C/h1>\n\u003Cp>As an SDET with years of experience in test automation, I’ve learned several valuable lessons about creating maintainable and reliable Selenium test suites. Here are some key best practices to follow:\u003C/p>\n\u003Ch2 id=\"1-use-page-object-model\">1. Use Page Object Model\u003C/h2>\n\u003Cp>The Page Object Model (POM) is a design pattern that creates an object repository for storing all web elements. It helps reduce code duplication and improves test maintenance.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"java\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">public\u003C/span>\u003Cspan style=\"color:#FF79C6\"> class\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> LoginPage\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    private\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> WebDriver\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> driver;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    @\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FindBy\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9\">id\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">username\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    private\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> WebElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> usernameField;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    @\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FindBy\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9\">id\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">password\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    private\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> WebElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> passwordField;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    public\u003C/span>\u003Cspan style=\"color:#50FA7B\"> LoginPage\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">WebDriver\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> driver\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9;font-style:italic\">        this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.driver \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> driver;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        PageFactory.\u003C/span>\u003Cspan style=\"color:#50FA7B\">initElements\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(driver, \u003C/span>\u003Cspan style=\"color:#BD93F9;font-style:italic\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    public\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> void\u003C/span>\u003Cspan style=\"color:#50FA7B\"> login\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">String\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> username\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">String\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> password\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        usernameField.\u003C/span>\u003Cspan style=\"color:#50FA7B\">sendKeys\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(username);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        passwordField.\u003C/span>\u003Cspan style=\"color:#50FA7B\">sendKeys\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(password);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        passwordField.\u003C/span>\u003Cspan style=\"color:#50FA7B\">submit\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"2-implement-proper-wait-strategies\">2. Implement Proper Wait Strategies\u003C/h2>\n\u003Cp>Always use explicit waits instead of implicit waits. They provide better control and make tests more reliable.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"java\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD;font-style:italic\">WebDriverWait\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> wait \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#FF79C6;font-weight:bold\"> new\u003C/span>\u003Cspan style=\"color:#50FA7B\"> WebDriverWait\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(driver, Duration.\u003C/span>\u003Cspan style=\"color:#50FA7B\">ofSeconds\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9\">10\u003C/span>\u003Cspan style=\"color:#F8F8F2\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD;font-style:italic\">WebElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> element \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> wait.\u003C/span>\u003Cspan style=\"color:#50FA7B\">until\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(ExpectedConditions.\u003C/span>\u003Cspan style=\"color:#50FA7B\">elementToBeClickable\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(By.\u003C/span>\u003Cspan style=\"color:#50FA7B\">id\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">submit\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"3-use-test-data-management\">3. Use Test Data Management\u003C/h2>\n\u003Cp>Externalize test data using JSON or Excel files. This makes tests more maintainable and allows for easy data updates.\u003C/p>\n\u003Ch2 id=\"4-implement-proper-reporting\">4. Implement Proper Reporting\u003C/h2>\n\u003Cp>Use tools like ExtentReports or Allure for detailed test reporting. Good reports help in quick problem identification.\u003C/p>\n\u003Cp>Remember: The key to successful test automation is writing maintainable, reliable, and scalable tests.\u003C/p>\n\u003Ch2 id=\"5-use-proper-exception-handling\">5. Use Proper Exception Handling\u003C/h2>\n\u003Cp>Implement proper exception handling to handle unexpected errors and improve test stability.\u003C/p>",{"headings":296,"localImagePaths":314,"remoteImagePaths":315,"frontmatter":316,"imagePaths":319},[297,299,302,305,308,311],{"depth":174,"slug":298,"text":285},"best-practices-for-selenium-test-automation",{"depth":130,"slug":300,"text":301},"1-use-page-object-model","1. Use Page Object Model",{"depth":130,"slug":303,"text":304},"2-implement-proper-wait-strategies","2. Implement Proper Wait Strategies",{"depth":130,"slug":306,"text":307},"3-use-test-data-management","3. Use Test Data Management",{"depth":130,"slug":309,"text":310},"4-implement-proper-reporting","4. Implement Proper Reporting",{"depth":130,"slug":312,"text":313},"5-use-proper-exception-handling","5. Use Proper Exception Handling",[],[],{"title":285,"date":317,"author":287,"tags":318},["Date","2025-04-27T00:00:00.000Z"],[289,165,121],[],"selenium-best-practices.md"]